class Solution {
public:
void recursion(int index , int k , int n , vector<int>& arr , vector<vector<int>> &ans , vector<int> output){
  if(n==0 && k==0){
      ans.push_back(output) ;
      return ;
  }
  if(index<0){
      return ;
  }
  if(k==0 && n!=0){
      return ;
  }
   // not include 
    recursion(index-1 , k , n , arr , ans , output) ;
    //include ;
    output.push_back(arr[index]) ;
    recursion(index-1 , k-1 , n-arr[index] ,arr,ans,output) ;
}
    vector<vector<int>> combinationSum3(int k, int n) {
      vector<vector<int>> ans ;
      vector<int> output ;
      vector<int> arr = {1,2,3,4,5,6,7,8,9} ;
      int index = arr.size()-1 ;
      recursion(index , k , n , arr , ans , output) ;
      return ans ;
    }
};

// using the approach of pick and not pick .  same approach as combination sum1 
