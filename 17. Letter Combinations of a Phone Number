class Solution {
public:
void recursion(int index ,vector<string> &ans ,string output ,string &digits ,string mapping[]){
    if(index >= digits.length()){
        ans.push_back(output) ;
        return  ;
    }
    int number = digits[index] - '0' ;
    string value = mapping[number] ;
    for(int i=0 ; i<value.length() ;i++){
        output.push_back(value[i]) ;
        recursion(index+1 ,ans,output,digits,mapping) ;
        output.pop_back() ;
    }
}
    vector<string> letterCombinations(string digits) {
        vector<string> ans ;
        if(digits.length() == 0){
            return ans ;
        }
        string output = "" ;
        string mapping[10]= {"","","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"} ;
        int index = 0 ;
        recursion(index , ans ,output,digits ,mapping) ;
        return ans ;
    }
};

// we will be using recursion to solve this problem .
